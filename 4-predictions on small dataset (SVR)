import pandas as pd
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split


def trans(rl,df,nb):
    rl_full=rl.copy(deep=True)
    # print(rl.iloc[:21,:])
    for i in range(len(rl.T)):
        m = np.mean(rl.iloc[:nb,i])
        std = np.std(rl.iloc[:nb,i])
        rl_full.iloc[:,i] = (rl.iloc[:,i]-m)/(std)

    rl_new = rl_full.iloc[:nb,:]
    rl_test = rl_full.iloc[nb:,:]

    year = np.array(rl_full.index)
    
    df_t=df.copy(deep=True)
    for i in range(len(df.T)):
        m = np.mean(df.iloc[:,i])
        std = np.std(df.iloc[:,i])
        df_t.iloc[:,i] = (df.iloc[:,i]-m)/(std)
    return rl_full,rl_new,rl_test,df_t,year



def SVR_model(x,x_full,y,year,j,c,g,rv=0.9):
    
    # 测试集和训练集
    x_train,x_val,y_train,y_val = train_test_split(x,y,test_size=0.1)

    if g!=0:
        gamma = [g]
    else:
        gamma = np.logspace(-7,7,30,base=2)
    if c!=0:
        C = [c]
    else:
        C = np.logspace(-7,7,30 ,base=2)
    
    met0 = ['linear','poly', 'rbf','sigmoid']

    met = [met0[j]]
    print(met)
    # 对SVR的各参数筛选，记录R2，测试和验证的MSE，以及各参数值
    loc,R,MSE_tr,MSE_tst =[],[],[],[]
    for m in met:
        for g in gamma:
            for c in C:
                # 测试集与验证集计算
                svr = SVR(kernel=m, C=c, gamma=g) 
                svr.fit(x_train,y_train)
                y_pred = svr.predict(x_train)
                MSE_train = mean_squared_error(y_pred,y_train)
                y_pred = svr.predict(x_val)
                MSE_test = mean_squared_error(y_pred,y_val)
                MSE_tr.append(MSE_train)
                MSE_tst.append(MSE_test)

                svr = SVR(kernel=m, C=c, gamma=g) 
                svr.fit(x,y)
                #C表征你有多么重视离群点，C越大越重视；gamma是核系数且gamma的值必须大于0
                y_pred = svr.predict(x)
                loc.append([m,c,g])
                R.append(r2_score(y_pred,y))
    
    print('参数选择结束')
    
    # 计算train-test
    func = lambda a,b:a-b
    tmt = list(map(func,MSE_tr,MSE_tst))
#     print('R values:',R)
#     print('gap between train and test:',tmt)

    # 记录满足条件的R和测试验证差值的绝对值，并记录满足条件记录在原列表的位置
    R_new,i_new,abmn = [],[],[]
    for i in range(len(tmt)):
        if 0.6<=R[i]<=rv and abs(tmt[i])<=MSE_tst[i] and abs(tmt[i])<=MSE_tr[i]:
            i_new.append(i)
            R_new.append(R[i])
            abmn.append(abs(tmt[i]))
    
#     print('gap-R',abmn)
#     print('suitable Rs:',R_new)
    # 计算abs(MSE_train-MSE_test)-R2, 找到最小值对应的坐标
    ab_R = list(map(func,abmn,R_new))
#     print(ab_R)
    ind = int(ab_R.index(min(ab_R)))
    # 使用此坐标找到原列表的坐标
    ind_fn = i_new[ind]
    # 使用找到的坐标，定位SVR 的参数
    mbst = loc[ind_fn][0]
    cbst = loc[ind_fn][1]
    gbst = loc[ind_fn][2]
    R2 = R[ind_fn]
    MSE_train = MSE_tr[ind_fn]
    MSE_test = MSE_tst[ind_fn]
    print('parameters：',mbst,cbst,gbst)
    print('R2:',R2)
    print(MSE_tr[ind_fn],MSE_tst[ind_fn])

    # 使用找到的最佳参数预测
    svr = SVR(kernel=mbst, C=cbst, gamma=gbst) 
    svr.fit(x,y)
    y_pred = svr.predict(x_full)
#     y_pred = [i*y_std+y_mean for i in y_pred]
    #最终拟合图
    plt.plot(year[:len(y)],y,'b*',label='real')
    plt.plot(year,y_pred,'r*',label='predict')
    plt.title('fitting plot')
    plt.xlabel('year')
    plt.ylabel('target')
    # plt.legend()
    plt.show()
    
    return y_pred,R2,MSE_train,MSE_test,mbst,cbst,gbst



hm = 'E:/东工课程/MasterFinalThesis/thesisProgress/content/FINAL_VERSION_PROCESS/model_data_pipeline/'

df0 = pd.read_excel(hm+'4_interpolate_dataset.xlsx', sheet_name='pub')
df0.index = df0.iloc[:,0]
df0 = df0.iloc[:,1:]

df1 = pd.read_excel(hm+'4_interpolate_dataset.xlsx', sheet_name='new')
df1.index = df1.iloc[:,0]
df1 = df1.iloc[:,1:]

rl = pd.read_excel(hm+'2_1_IV_pred.xlsx',sheet_name='combine')
rl.index = rl.iloc[:,0]
rl.columns = ['year','saving','labor','other_macro','pop_env_ene']
rl = rl.iloc[:,1:] # relative variables

# full relative variables minyear to 2040
rl0 = rl.iloc[22:,:]
rl1 = rl.iloc[34:,:]
# print(df0)



def result(dfx,rlx,met,cvalue,gvalue,r=0.9,numb=21):
    name = dfx.columns
    # print(df0)
    # for i in range(len(df0.T)):
    #     print(name[i])
    #     mean_y = np.mean(df0.iloc[:,i])
    #     std_y = np.std(df0.iloc[:,i])
    #     print('mean and std',mean_y,std_y)

#     met = [0,2.2,0]
    rl_full,rl_new,rl_test,df_t,year = trans(rlx,dfx,numb)

    x = rl_new
    x_full = rl_full
    y_pred_fnl = []
    para = [] 

    for i in range(len(df_t.T)):
        print(name[i])
        y = df_t.iloc[:,i]
        mean_y = np.mean(dfx.iloc[:,i])
        std_y = np.std(dfx.iloc[:,i])
        print('mean and std',mean_y,std_y)

        j = int(met[i])
        c = cvalue[i]
        g = gvalue[i]
        
        print('i:',i)
        print('met:',met[i])
        print('j:',j)
        y_pred,R2,MSE_train,MSE_test,mbst,cbst,gbst = SVR_model(x,x_full,y,year,j,c,g,r)
        print(y_pred,R2,MSE_train,MSE_test,mbst,cbst,gbst)

        y_pred_fnl0 = y_pred*std_y+mean_y
        y_pred_fnl.append(y_pred_fnl0)

        para0 = [R2,MSE_train,MSE_test,mbst,cbst,gbst]
        para.append(para0)

    y_pred_fnl= pd.DataFrame(np.array(y_pred_fnl).T,index=year,columns=name)
    print(y_pred_fnl)

    para_name=['R2','MSE_train','MSE_test','kernal','C','gamma']
    para_pred = pd.DataFrame(para,index=list(name),columns=para_name)
    print(para_pred)
    
    return y_pred_fnl,para_pred
    
    
    
    
met = [0,0,2,0]
cvalue = [0,128,17.189412,0]
gvalue = [0,0.007812,0.158750,0]
# cvalue = [0,0,0,0]
# gvalue = [0,0,0,0]
y_pred_fnl0,para_pred0 = result(df0,rl0,met,cvalue,gvalue,0.99,21)
print(y_pred_fnl0)
print(para_pred0)


hm = 'E:/东工课程/MasterFinalThesis/thesisProgress/content/FINAL_VERSION_PROCESS/model_data_pipeline/'

writer = pd.ExcelWriter(hm+'5_1_small_dataset_results.xlsx')
y_pred_fnl0.to_excel(writer,sheet_name='pub_SVR')
y_pred_fnl1.to_excel(writer,sheet_name='new_SVR')

writer.save()
writer.close()

para = pd.concat([para_pred0,para_pred1],axis=0)
print(para)
